// !bwc! I apologize that this is so ugly. If you know of a standard GNU utility that will re-indent uglified c++ code (like this), let me know...
// Generated by updateHeaders.sh 
#undef defineHeader
#define defineHeader(_header, _name, _type, _rfc)                                                       \
const H_##_header::Type&                                                                                \
SipMessage::header(const H_##_header& headerType) const                                                 \
{                                                                                                       \
   HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true);                           \
   if (hfvs->getParserContainer() == 0)                                                                 \
   {                                                                                                    \
      hfvs->setParserContainer(new ParserContainer<H_##_header::Type>(hfvs, headerType.getTypeNum()));  \
   }                                                                                                    \
   return dynamic_cast<ParserContainer<H_##_header::Type>*>(hfvs->getParserContainer())->front();       \
}                                                                                                       \
                                                                                                        \
H_##_header::Type&                                                                                      \
SipMessage::header(const H_##_header& headerType)                                                       \
{                                                                                                       \
   HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true);                           \
   if (hfvs->getParserContainer() == 0)                                                                 \
   {                                                                                                    \
      hfvs->setParserContainer(new ParserContainer<H_##_header::Type>(hfvs, headerType.getTypeNum()));  \
   }                                                                                                    \
   return dynamic_cast<ParserContainer<H_##_header::Type>*>(hfvs->getParserContainer())->front();       \
}

#undef defineMultiHeader
#define defineMultiHeader(_header, _name, _type, _rfc)                                          \
const H_##_header##s::Type&                                                                     \
SipMessage::header(const H_##_header##s& headerType) const                                      \
{                                                                                               \
   HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false);                  \
   if (hfvs->getParserContainer() == 0)                                                         \
   {                                                                                            \
      hfvs->setParserContainer(new H_##_header##s::Type(hfvs, headerType.getTypeNum()));        \
   }                                                                                            \
   return *dynamic_cast<H_##_header##s::Type*>(hfvs->getParserContainer());                     \
}                                                                                               \
                                                                                                \
H_##_header##s::Type&                                                                           \
SipMessage::header(const H_##_header##s& headerType)                                            \
{                                                                                               \
   HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false);                  \
   if (hfvs->getParserContainer() == 0)                                                         \
   {                                                                                            \
      hfvs->setParserContainer(new H_##_header##s::Type(hfvs, headerType.getTypeNum()));        \
   }                                                                                            \
   return *dynamic_cast<H_##_header##s::Type*>(hfvs->getParserContainer());                     \
}

#define defineShort(_enum, _name) 

// .bwc. This is the file you edit when you want to add native support for a
// header to the stack. A few basic facts about how this file is used:
// * Only lines beginning with "defineHeader", "defineMultiHeader", or "defineShort" are processed in any way.
// * defineHeader defines a single-value header, defineMultiHeader defines a multi-value header.
// * defineShort defines a "short" representation of a header
// * The order in which headers appear in this file is the order that headers will appear in messages sent to the wire.
// * The syntax expected for defineHeader(<1>, "<2>", <3>, "<4>")
//    1: The postfix for the accessor token; ie MaxForwards -> h_MaxForwards
//    2: The name of the header as it will appear on the wire
//    3: The class that will be used to represent the header's value
//    4: A reference to where the header was defined
// * The syntax expected for defineMultiHeader(<1>, "<2>", <3>, "<4>")
//    1: The postfix for the accessor token; ie MaxForwards -> h_MaxForwards
//    2: The name of the header as it will appear on the wire
//    3: The class that will be used to represent the header's value
//    4: A reference to where the header was defined
// * The syntax expected for defineShort(<1>, "<2>")
//    1: The postfix for the accessor token; ie MaxForwards -> h_MaxForwards
//    2: The name of the header as it will appear on the wire
//    Having a defineShort for a header not defined with either defineHeader or defineMultiHeader is an error.
// If you have edited this file, you then need to run updateHeaders.sh.


defineShort(CallID, "i")
defineShort(Contact, "m")
defineShort(ContentEncoding, "e")
defineShort(ContentLength, "l")
defineShort(ContentType, "c")
defineShort(From, "f")
defineShort(Subject, "s")
defineShort(Supported, "k")
defineShort(To, "t")
defineShort(Via, "v")
defineShort(ReferTo, "r")
defineShort(ReferredBy, "b")
defineShort(SessionExpires, "x")
defineShort(Identity, "y")
defineShort(Event, "o")
defineMultiHeader(Via, "Via", Via, "RFC 3261") // rjs says must be first
defineHeader(MaxForwards, "Max-Forwards", UInt32Category, "RFC 3261")
defineMultiHeader(Route, "Route", NameAddr, "RFC 3261")
defineMultiHeader(RecordRoute, "Record-Route", NameAddr, "RFC 3261")
defineMultiHeader(Path, "Path", NameAddr, "RFC 3327")
defineMultiHeader(ServiceRoute, "Service-Route", NameAddr, "RFC 3608")
defineMultiHeader(ProxyRequire, "Proxy-Require", Token, "RFC 3261")
defineMultiHeader(ProxyAuthenticate, "Proxy-Authenticate", Auth, "RFC 3261")
defineHeader(Identity, "Identity", StringCategory, "RFC 4474")
defineHeader(IdentityInfo, "Identity-Info", GenericUri, "RFC 4474")
defineMultiHeader(Require, "Require", Token, "RFC 3261")
defineMultiHeader(Contact, "Contact", NameAddr, "RFC 3261")
defineHeader(To, "To", NameAddr, "RFC 3261") 
defineHeader(From, "From", NameAddr, "RFC 3261")
defineHeader(CallID, "Call-ID", CallId, "RFC 3261")
defineHeader(CSeq, "CSeq", CSeqCategory, "RFC 3261")
defineHeader(Subject, "Subject", StringCategory, "RFC 3261")
defineHeader(Expires, "Expires", ExpiresCategory, "RFC 3261")
defineHeader(SessionExpires, "Session-Expires", ExpiresCategory, "RFC 4028")
defineHeader(MinSE, "Min-SE", ExpiresCategory, "RFC 4028")
defineMultiHeader(Accept, "Accept", Mime, "RFC 3261")
defineMultiHeader(AcceptEncoding, "Accept-Encoding", Token, "RFC 3261")
defineMultiHeader(AcceptLanguage, "Accept-Language", Token, "RFC 3261")
defineMultiHeader(AcceptResourcePriority, "Accept-Resource-Priority", Token, "RFC 4412")
defineMultiHeader(AlertInfo, "Alert-Info", GenericUri, "RFC 3261")
defineMultiHeader(Allow, "Allow", Token, "RFC 3261")
defineHeader(AuthenticationInfo, "Authentication-Info", Auth, "RFC 3261")
defineMultiHeader(CallInfo, "Call-Info", GenericUri, "RFC 3261")
defineHeader(ContentDisposition, "Content-Disposition", Token, "RFC ?")
defineHeader(ContentEncoding, "Content-Encoding", Token, "RFC ?")
defineHeader(ContentId, "Content-ID", Token, "RFC 2045")
defineMultiHeader(ContentLanguage, "Content-Language", Token, "RFC ?")
// i really think that Content-Transfer-Encoding should be a Token  !rwm
defineHeader(ContentTransferEncoding, "Content-Transfer-Encoding", StringCategory, "RFC ?") // !dlb! defineMultiHeader
defineHeader(ContentType, "Content-Type", Mime, "RFC 3261")
defineHeader(Date, "Date", DateCategory, "RFC 3261")
defineMultiHeader(ErrorInfo, "Error-Info", GenericUri, "RFC 3261")
defineMultiHeader(HistoryInfo, "History-Info", NameAddr, "RFC 4244")
defineHeader(InReplyTo, "In-Reply-To", CallId, "RFC 3261")
defineHeader(MinExpires, "Min-Expires", UInt32Category, "RFC 3261")
defineHeader(MIMEVersion, "MIME-Version", Token, "RFC 3261")
defineHeader(Organization, "Organization", StringCategory, "RFC 3261")
defineMultiHeader(PermissionMissing, "Permission-Missing", NameAddr, "draft-ietf-sip-consent-framework-04")
defineHeader(Priority, "Priority", Token, "RFC 3261")
defineMultiHeader(ProxyAuthorization, "Proxy-Authorization", Auth, "RFC 3261")
defineMultiHeader(ResourcePriority, "Resource-Priority", Token, "RFC 4412")
defineHeader(ReplyTo, "Reply-To", NameAddr, "RFC 3261")
// !dlb! this one is not quite right -- can have (comment) after field value
// !rwm!  WHO CARES!!!! Comments are evil
defineHeader(RetryAfter, "Retry-After", UInt32Category, "RFC 3261")
defineHeader(Server, "Server", StringCategory, "RFC 3261")
defineHeader(SIPETag, "SIP-ETag", Token, "RFC 3903")
defineHeader(SIPIfMatch, "SIP-If-Match", Token, "RFC 3903")
defineMultiHeader(Supported, "Supported", Token, "RFC 3261")
defineHeader(Timestamp, "Timestamp", StringCategory, "RFC 3261")
defineMultiHeader(TriggerConsent, "Trigger-Consent", Uri, "draft-ietf-sip-consent-framework-04")
defineMultiHeader(Unsupported, "Unsupported", Token, "RFC 3261")
defineHeader(UserAgent, "User-Agent", StringCategory, "RFC 3261")
defineMultiHeader(Warning, "Warning", WarningCategory, "RFC 3261")
defineMultiHeader(WWWAuthenticate, "WWW-Authenticate", Auth, "RFC 3261")
defineHeader(SubscriptionState, "Subscription-State", Token, "RFC 3265")
defineHeader(ReferTo, "Refer-To", NameAddr, "RFC 3515")
defineHeader(ReferredBy, "Referred-By", NameAddr, "RFC 3892")
defineMultiHeader(Authorization, "Authorization", Auth, "RFC 3261")
defineHeader(Replaces, "Replaces", CallId, "RFC 3891")
defineHeader(Event, "Event", Token, "RFC 3265")
defineMultiHeader(AllowEvents, "Allow-Events", Token, "RFC 3265")
defineMultiHeader(SecurityClient, "Security-Client", Token, "RFC 3329")
defineMultiHeader(SecurityServer, "Security-Server", Token, "RFC 3329")
defineMultiHeader(SecurityVerify, "Security-Verify", Token, "RFC 3329")
defineHeader(RSeq, "RSeq", UInt32Category, "RFC 3262")
defineHeader(RAck, "RAck", RAckCategory, "RFC 3262")
defineMultiHeader(Reason, "Reason", Token, "RFC 3326")
defineMultiHeader(Privacy, "Privacy", Token, "RFC 3323")
defineMultiHeader(RequestDisposition, "Request-Disposition", Token, "RFC 3841")
defineMultiHeader(PMediaAuthorization, "P-Media-Authorization", Token, "RFC 3313")
defineHeader(Join, "Join", CallId, "RFC 3911")
defineHeader(TargetDialog, "Target-Dialog", CallId, "RFC 4538")
defineMultiHeader(PAssertedIdentity, "P-Asserted-Identity", NameAddr, "RFC 3325")
defineMultiHeader(PPreferredIdentity, "P-Preferred-Identity", NameAddr, "RFC 3325")
defineMultiHeader(AcceptContact, "Accept-Contact", NameAddr, "RFC 3841")
defineMultiHeader(RejectContact, "Reject-Contact", NameAddr, "RFC 3841")
defineHeader(PCalledPartyId, "P-Called-Party-ID", NameAddr, "RFC 3455")
defineMultiHeader(PAssociatedUri, "P-Associated-URI", NameAddr, "RFC 3455")
// !dlb! not clear this needs to be exposed
defineHeader(ContentLength, "Content-Length", UInt32Category, "RFC 3261")
defineHeader(ReferSub, "Refer-Sub", Token, "RFC 4488")
defineHeader(AnswerMode, "Answer-Mode", Token, "draft-ietf-answermode-01")
defineHeader(PrivAnswerMode, "Priv-Answer-Mode", Token, "draft-ietf-answermode-01")
defineHeader(RemotePartyId, "Remote-Party-ID", NameAddr, "draft-ietf-sip-privacy-04") // ?bwc? Not in 3323, should we keep?
#undef defineHeader
#undef defineMultiHeader
#undef defineShort
