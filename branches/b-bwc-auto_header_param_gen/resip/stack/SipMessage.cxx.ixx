// !bwc! I apologize that this is so ugly. If you know of a standard GNU utility that will re-indent uglified c++ code (like this), let me know...
// Generated by updateHeaders.sh 










const H_Vias::Type& SipMessage::header(const H_Vias& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Vias::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Vias::Type*>(hfvs->getParserContainer()); } H_Vias::Type& SipMessage::header(const H_Vias& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Vias::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Vias::Type*>(hfvs->getParserContainer()); }
const H_MaxForwards::Type& SipMessage::header(const H_MaxForwards& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_MaxForwards::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_MaxForwards::Type>*>(hfvs->getParserContainer())->front(); } H_MaxForwards::Type& SipMessage::header(const H_MaxForwards& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_MaxForwards::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_MaxForwards::Type>*>(hfvs->getParserContainer())->front(); }
const H_Routes::Type& SipMessage::header(const H_Routes& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Routes::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Routes::Type*>(hfvs->getParserContainer()); } H_Routes::Type& SipMessage::header(const H_Routes& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Routes::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Routes::Type*>(hfvs->getParserContainer()); }
const H_RecordRoutes::Type& SipMessage::header(const H_RecordRoutes& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_RecordRoutes::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_RecordRoutes::Type*>(hfvs->getParserContainer()); } H_RecordRoutes::Type& SipMessage::header(const H_RecordRoutes& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_RecordRoutes::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_RecordRoutes::Type*>(hfvs->getParserContainer()); }
const H_Paths::Type& SipMessage::header(const H_Paths& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Paths::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Paths::Type*>(hfvs->getParserContainer()); } H_Paths::Type& SipMessage::header(const H_Paths& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Paths::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Paths::Type*>(hfvs->getParserContainer()); }
const H_ServiceRoutes::Type& SipMessage::header(const H_ServiceRoutes& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ServiceRoutes::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ServiceRoutes::Type*>(hfvs->getParserContainer()); } H_ServiceRoutes::Type& SipMessage::header(const H_ServiceRoutes& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ServiceRoutes::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ServiceRoutes::Type*>(hfvs->getParserContainer()); }
const H_ProxyRequires::Type& SipMessage::header(const H_ProxyRequires& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ProxyRequires::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ProxyRequires::Type*>(hfvs->getParserContainer()); } H_ProxyRequires::Type& SipMessage::header(const H_ProxyRequires& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ProxyRequires::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ProxyRequires::Type*>(hfvs->getParserContainer()); }
const H_ProxyAuthenticates::Type& SipMessage::header(const H_ProxyAuthenticates& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ProxyAuthenticates::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ProxyAuthenticates::Type*>(hfvs->getParserContainer()); } H_ProxyAuthenticates::Type& SipMessage::header(const H_ProxyAuthenticates& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ProxyAuthenticates::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ProxyAuthenticates::Type*>(hfvs->getParserContainer()); }
const H_Identity::Type& SipMessage::header(const H_Identity& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Identity::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Identity::Type>*>(hfvs->getParserContainer())->front(); } H_Identity::Type& SipMessage::header(const H_Identity& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Identity::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Identity::Type>*>(hfvs->getParserContainer())->front(); }
const H_IdentityInfo::Type& SipMessage::header(const H_IdentityInfo& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_IdentityInfo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_IdentityInfo::Type>*>(hfvs->getParserContainer())->front(); } H_IdentityInfo::Type& SipMessage::header(const H_IdentityInfo& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_IdentityInfo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_IdentityInfo::Type>*>(hfvs->getParserContainer())->front(); }
const H_Requires::Type& SipMessage::header(const H_Requires& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Requires::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Requires::Type*>(hfvs->getParserContainer()); } H_Requires::Type& SipMessage::header(const H_Requires& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Requires::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Requires::Type*>(hfvs->getParserContainer()); }
const H_Contacts::Type& SipMessage::header(const H_Contacts& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Contacts::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Contacts::Type*>(hfvs->getParserContainer()); } H_Contacts::Type& SipMessage::header(const H_Contacts& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Contacts::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Contacts::Type*>(hfvs->getParserContainer()); }
const H_To::Type& SipMessage::header(const H_To& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_To::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_To::Type>*>(hfvs->getParserContainer())->front(); } H_To::Type& SipMessage::header(const H_To& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_To::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_To::Type>*>(hfvs->getParserContainer())->front(); }
const H_From::Type& SipMessage::header(const H_From& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_From::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_From::Type>*>(hfvs->getParserContainer())->front(); } H_From::Type& SipMessage::header(const H_From& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_From::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_From::Type>*>(hfvs->getParserContainer())->front(); }
const H_CallID::Type& SipMessage::header(const H_CallID& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_CallID::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_CallID::Type>*>(hfvs->getParserContainer())->front(); } H_CallID::Type& SipMessage::header(const H_CallID& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_CallID::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_CallID::Type>*>(hfvs->getParserContainer())->front(); }
const H_CSeq::Type& SipMessage::header(const H_CSeq& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_CSeq::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_CSeq::Type>*>(hfvs->getParserContainer())->front(); } H_CSeq::Type& SipMessage::header(const H_CSeq& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_CSeq::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_CSeq::Type>*>(hfvs->getParserContainer())->front(); }
const H_Subject::Type& SipMessage::header(const H_Subject& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Subject::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Subject::Type>*>(hfvs->getParserContainer())->front(); } H_Subject::Type& SipMessage::header(const H_Subject& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Subject::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Subject::Type>*>(hfvs->getParserContainer())->front(); }
const H_Expires::Type& SipMessage::header(const H_Expires& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Expires::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Expires::Type>*>(hfvs->getParserContainer())->front(); } H_Expires::Type& SipMessage::header(const H_Expires& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Expires::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Expires::Type>*>(hfvs->getParserContainer())->front(); }
const H_SessionExpires::Type& SipMessage::header(const H_SessionExpires& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_SessionExpires::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_SessionExpires::Type>*>(hfvs->getParserContainer())->front(); } H_SessionExpires::Type& SipMessage::header(const H_SessionExpires& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_SessionExpires::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_SessionExpires::Type>*>(hfvs->getParserContainer())->front(); }
const H_MinSE::Type& SipMessage::header(const H_MinSE& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_MinSE::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_MinSE::Type>*>(hfvs->getParserContainer())->front(); } H_MinSE::Type& SipMessage::header(const H_MinSE& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_MinSE::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_MinSE::Type>*>(hfvs->getParserContainer())->front(); }
const H_Accepts::Type& SipMessage::header(const H_Accepts& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Accepts::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Accepts::Type*>(hfvs->getParserContainer()); } H_Accepts::Type& SipMessage::header(const H_Accepts& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Accepts::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Accepts::Type*>(hfvs->getParserContainer()); }
const H_AcceptEncodings::Type& SipMessage::header(const H_AcceptEncodings& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AcceptEncodings::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AcceptEncodings::Type*>(hfvs->getParserContainer()); } H_AcceptEncodings::Type& SipMessage::header(const H_AcceptEncodings& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AcceptEncodings::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AcceptEncodings::Type*>(hfvs->getParserContainer()); }
const H_AcceptLanguages::Type& SipMessage::header(const H_AcceptLanguages& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AcceptLanguages::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AcceptLanguages::Type*>(hfvs->getParserContainer()); } H_AcceptLanguages::Type& SipMessage::header(const H_AcceptLanguages& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AcceptLanguages::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AcceptLanguages::Type*>(hfvs->getParserContainer()); }
const H_AlertInfos::Type& SipMessage::header(const H_AlertInfos& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AlertInfos::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AlertInfos::Type*>(hfvs->getParserContainer()); } H_AlertInfos::Type& SipMessage::header(const H_AlertInfos& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AlertInfos::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AlertInfos::Type*>(hfvs->getParserContainer()); }
const H_Allows::Type& SipMessage::header(const H_Allows& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Allows::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Allows::Type*>(hfvs->getParserContainer()); } H_Allows::Type& SipMessage::header(const H_Allows& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Allows::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Allows::Type*>(hfvs->getParserContainer()); }
const H_AuthenticationInfo::Type& SipMessage::header(const H_AuthenticationInfo& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_AuthenticationInfo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_AuthenticationInfo::Type>*>(hfvs->getParserContainer())->front(); } H_AuthenticationInfo::Type& SipMessage::header(const H_AuthenticationInfo& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_AuthenticationInfo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_AuthenticationInfo::Type>*>(hfvs->getParserContainer())->front(); }
const H_CallInfos::Type& SipMessage::header(const H_CallInfos& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_CallInfos::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_CallInfos::Type*>(hfvs->getParserContainer()); } H_CallInfos::Type& SipMessage::header(const H_CallInfos& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_CallInfos::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_CallInfos::Type*>(hfvs->getParserContainer()); }
const H_ContentDisposition::Type& SipMessage::header(const H_ContentDisposition& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentDisposition::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentDisposition::Type>*>(hfvs->getParserContainer())->front(); } H_ContentDisposition::Type& SipMessage::header(const H_ContentDisposition& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentDisposition::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentDisposition::Type>*>(hfvs->getParserContainer())->front(); }
const H_ContentEncoding::Type& SipMessage::header(const H_ContentEncoding& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentEncoding::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentEncoding::Type>*>(hfvs->getParserContainer())->front(); } H_ContentEncoding::Type& SipMessage::header(const H_ContentEncoding& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentEncoding::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentEncoding::Type>*>(hfvs->getParserContainer())->front(); }
const H_ContentId::Type& SipMessage::header(const H_ContentId& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentId::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentId::Type>*>(hfvs->getParserContainer())->front(); } H_ContentId::Type& SipMessage::header(const H_ContentId& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentId::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentId::Type>*>(hfvs->getParserContainer())->front(); }
const H_ContentLanguages::Type& SipMessage::header(const H_ContentLanguages& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ContentLanguages::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ContentLanguages::Type*>(hfvs->getParserContainer()); } H_ContentLanguages::Type& SipMessage::header(const H_ContentLanguages& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ContentLanguages::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ContentLanguages::Type*>(hfvs->getParserContainer()); }
const H_ContentTransferEncoding::Type& SipMessage::header(const H_ContentTransferEncoding& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentTransferEncoding::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentTransferEncoding::Type>*>(hfvs->getParserContainer())->front(); } H_ContentTransferEncoding::Type& SipMessage::header(const H_ContentTransferEncoding& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentTransferEncoding::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentTransferEncoding::Type>*>(hfvs->getParserContainer())->front(); }
const H_ContentType::Type& SipMessage::header(const H_ContentType& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentType::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentType::Type>*>(hfvs->getParserContainer())->front(); } H_ContentType::Type& SipMessage::header(const H_ContentType& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentType::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentType::Type>*>(hfvs->getParserContainer())->front(); }
const H_Date::Type& SipMessage::header(const H_Date& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Date::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Date::Type>*>(hfvs->getParserContainer())->front(); } H_Date::Type& SipMessage::header(const H_Date& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Date::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Date::Type>*>(hfvs->getParserContainer())->front(); }
const H_ErrorInfos::Type& SipMessage::header(const H_ErrorInfos& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ErrorInfos::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ErrorInfos::Type*>(hfvs->getParserContainer()); } H_ErrorInfos::Type& SipMessage::header(const H_ErrorInfos& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ErrorInfos::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ErrorInfos::Type*>(hfvs->getParserContainer()); }
const H_InReplyTo::Type& SipMessage::header(const H_InReplyTo& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_InReplyTo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_InReplyTo::Type>*>(hfvs->getParserContainer())->front(); } H_InReplyTo::Type& SipMessage::header(const H_InReplyTo& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_InReplyTo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_InReplyTo::Type>*>(hfvs->getParserContainer())->front(); }
const H_MinExpires::Type& SipMessage::header(const H_MinExpires& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_MinExpires::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_MinExpires::Type>*>(hfvs->getParserContainer())->front(); } H_MinExpires::Type& SipMessage::header(const H_MinExpires& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_MinExpires::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_MinExpires::Type>*>(hfvs->getParserContainer())->front(); }
const H_MIMEVersion::Type& SipMessage::header(const H_MIMEVersion& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_MIMEVersion::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_MIMEVersion::Type>*>(hfvs->getParserContainer())->front(); } H_MIMEVersion::Type& SipMessage::header(const H_MIMEVersion& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_MIMEVersion::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_MIMEVersion::Type>*>(hfvs->getParserContainer())->front(); }
const H_Organization::Type& SipMessage::header(const H_Organization& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Organization::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Organization::Type>*>(hfvs->getParserContainer())->front(); } H_Organization::Type& SipMessage::header(const H_Organization& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Organization::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Organization::Type>*>(hfvs->getParserContainer())->front(); }
const H_Priority::Type& SipMessage::header(const H_Priority& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Priority::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Priority::Type>*>(hfvs->getParserContainer())->front(); } H_Priority::Type& SipMessage::header(const H_Priority& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Priority::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Priority::Type>*>(hfvs->getParserContainer())->front(); }
const H_ProxyAuthorizations::Type& SipMessage::header(const H_ProxyAuthorizations& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ProxyAuthorizations::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ProxyAuthorizations::Type*>(hfvs->getParserContainer()); } H_ProxyAuthorizations::Type& SipMessage::header(const H_ProxyAuthorizations& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_ProxyAuthorizations::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_ProxyAuthorizations::Type*>(hfvs->getParserContainer()); }
const H_ReplyTo::Type& SipMessage::header(const H_ReplyTo& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ReplyTo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ReplyTo::Type>*>(hfvs->getParserContainer())->front(); } H_ReplyTo::Type& SipMessage::header(const H_ReplyTo& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ReplyTo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ReplyTo::Type>*>(hfvs->getParserContainer())->front(); }
const H_RetryAfter::Type& SipMessage::header(const H_RetryAfter& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_RetryAfter::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_RetryAfter::Type>*>(hfvs->getParserContainer())->front(); } H_RetryAfter::Type& SipMessage::header(const H_RetryAfter& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_RetryAfter::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_RetryAfter::Type>*>(hfvs->getParserContainer())->front(); }
const H_Server::Type& SipMessage::header(const H_Server& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Server::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Server::Type>*>(hfvs->getParserContainer())->front(); } H_Server::Type& SipMessage::header(const H_Server& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Server::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Server::Type>*>(hfvs->getParserContainer())->front(); }
const H_SIPETag::Type& SipMessage::header(const H_SIPETag& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_SIPETag::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_SIPETag::Type>*>(hfvs->getParserContainer())->front(); } H_SIPETag::Type& SipMessage::header(const H_SIPETag& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_SIPETag::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_SIPETag::Type>*>(hfvs->getParserContainer())->front(); }
const H_SIPIfMatch::Type& SipMessage::header(const H_SIPIfMatch& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_SIPIfMatch::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_SIPIfMatch::Type>*>(hfvs->getParserContainer())->front(); } H_SIPIfMatch::Type& SipMessage::header(const H_SIPIfMatch& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_SIPIfMatch::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_SIPIfMatch::Type>*>(hfvs->getParserContainer())->front(); }
const H_Supporteds::Type& SipMessage::header(const H_Supporteds& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Supporteds::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Supporteds::Type*>(hfvs->getParserContainer()); } H_Supporteds::Type& SipMessage::header(const H_Supporteds& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Supporteds::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Supporteds::Type*>(hfvs->getParserContainer()); }
const H_Timestamp::Type& SipMessage::header(const H_Timestamp& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Timestamp::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Timestamp::Type>*>(hfvs->getParserContainer())->front(); } H_Timestamp::Type& SipMessage::header(const H_Timestamp& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Timestamp::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Timestamp::Type>*>(hfvs->getParserContainer())->front(); }
const H_Unsupporteds::Type& SipMessage::header(const H_Unsupporteds& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Unsupporteds::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Unsupporteds::Type*>(hfvs->getParserContainer()); } H_Unsupporteds::Type& SipMessage::header(const H_Unsupporteds& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Unsupporteds::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Unsupporteds::Type*>(hfvs->getParserContainer()); }
const H_UserAgent::Type& SipMessage::header(const H_UserAgent& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_UserAgent::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_UserAgent::Type>*>(hfvs->getParserContainer())->front(); } H_UserAgent::Type& SipMessage::header(const H_UserAgent& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_UserAgent::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_UserAgent::Type>*>(hfvs->getParserContainer())->front(); }
const H_Warnings::Type& SipMessage::header(const H_Warnings& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Warnings::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Warnings::Type*>(hfvs->getParserContainer()); } H_Warnings::Type& SipMessage::header(const H_Warnings& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Warnings::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Warnings::Type*>(hfvs->getParserContainer()); }
const H_WWWAuthenticates::Type& SipMessage::header(const H_WWWAuthenticates& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_WWWAuthenticates::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_WWWAuthenticates::Type*>(hfvs->getParserContainer()); } H_WWWAuthenticates::Type& SipMessage::header(const H_WWWAuthenticates& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_WWWAuthenticates::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_WWWAuthenticates::Type*>(hfvs->getParserContainer()); }
const H_SubscriptionState::Type& SipMessage::header(const H_SubscriptionState& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_SubscriptionState::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_SubscriptionState::Type>*>(hfvs->getParserContainer())->front(); } H_SubscriptionState::Type& SipMessage::header(const H_SubscriptionState& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_SubscriptionState::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_SubscriptionState::Type>*>(hfvs->getParserContainer())->front(); }
const H_ReferTo::Type& SipMessage::header(const H_ReferTo& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ReferTo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ReferTo::Type>*>(hfvs->getParserContainer())->front(); } H_ReferTo::Type& SipMessage::header(const H_ReferTo& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ReferTo::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ReferTo::Type>*>(hfvs->getParserContainer())->front(); }
const H_ReferredBy::Type& SipMessage::header(const H_ReferredBy& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ReferredBy::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ReferredBy::Type>*>(hfvs->getParserContainer())->front(); } H_ReferredBy::Type& SipMessage::header(const H_ReferredBy& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ReferredBy::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ReferredBy::Type>*>(hfvs->getParserContainer())->front(); }
const H_Authorizations::Type& SipMessage::header(const H_Authorizations& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Authorizations::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Authorizations::Type*>(hfvs->getParserContainer()); } H_Authorizations::Type& SipMessage::header(const H_Authorizations& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Authorizations::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Authorizations::Type*>(hfvs->getParserContainer()); }
const H_Replaces::Type& SipMessage::header(const H_Replaces& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Replaces::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Replaces::Type>*>(hfvs->getParserContainer())->front(); } H_Replaces::Type& SipMessage::header(const H_Replaces& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Replaces::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Replaces::Type>*>(hfvs->getParserContainer())->front(); }
const H_Event::Type& SipMessage::header(const H_Event& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Event::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Event::Type>*>(hfvs->getParserContainer())->front(); } H_Event::Type& SipMessage::header(const H_Event& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Event::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Event::Type>*>(hfvs->getParserContainer())->front(); }
const H_AllowEventss::Type& SipMessage::header(const H_AllowEventss& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AllowEventss::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AllowEventss::Type*>(hfvs->getParserContainer()); } H_AllowEventss::Type& SipMessage::header(const H_AllowEventss& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AllowEventss::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AllowEventss::Type*>(hfvs->getParserContainer()); }
const H_SecurityClients::Type& SipMessage::header(const H_SecurityClients& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_SecurityClients::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_SecurityClients::Type*>(hfvs->getParserContainer()); } H_SecurityClients::Type& SipMessage::header(const H_SecurityClients& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_SecurityClients::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_SecurityClients::Type*>(hfvs->getParserContainer()); }
const H_SecurityServers::Type& SipMessage::header(const H_SecurityServers& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_SecurityServers::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_SecurityServers::Type*>(hfvs->getParserContainer()); } H_SecurityServers::Type& SipMessage::header(const H_SecurityServers& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_SecurityServers::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_SecurityServers::Type*>(hfvs->getParserContainer()); }
const H_SecurityVerifys::Type& SipMessage::header(const H_SecurityVerifys& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_SecurityVerifys::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_SecurityVerifys::Type*>(hfvs->getParserContainer()); } H_SecurityVerifys::Type& SipMessage::header(const H_SecurityVerifys& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_SecurityVerifys::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_SecurityVerifys::Type*>(hfvs->getParserContainer()); }
const H_RSeq::Type& SipMessage::header(const H_RSeq& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_RSeq::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_RSeq::Type>*>(hfvs->getParserContainer())->front(); } H_RSeq::Type& SipMessage::header(const H_RSeq& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_RSeq::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_RSeq::Type>*>(hfvs->getParserContainer())->front(); }
const H_RAck::Type& SipMessage::header(const H_RAck& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_RAck::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_RAck::Type>*>(hfvs->getParserContainer())->front(); } H_RAck::Type& SipMessage::header(const H_RAck& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_RAck::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_RAck::Type>*>(hfvs->getParserContainer())->front(); }
const H_Reasons::Type& SipMessage::header(const H_Reasons& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Reasons::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Reasons::Type*>(hfvs->getParserContainer()); } H_Reasons::Type& SipMessage::header(const H_Reasons& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Reasons::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Reasons::Type*>(hfvs->getParserContainer()); }
const H_Privacys::Type& SipMessage::header(const H_Privacys& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Privacys::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Privacys::Type*>(hfvs->getParserContainer()); } H_Privacys::Type& SipMessage::header(const H_Privacys& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_Privacys::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_Privacys::Type*>(hfvs->getParserContainer()); }
const H_RequestDispositions::Type& SipMessage::header(const H_RequestDispositions& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_RequestDispositions::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_RequestDispositions::Type*>(hfvs->getParserContainer()); } H_RequestDispositions::Type& SipMessage::header(const H_RequestDispositions& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_RequestDispositions::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_RequestDispositions::Type*>(hfvs->getParserContainer()); }
const H_PMediaAuthorizations::Type& SipMessage::header(const H_PMediaAuthorizations& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_PMediaAuthorizations::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_PMediaAuthorizations::Type*>(hfvs->getParserContainer()); } H_PMediaAuthorizations::Type& SipMessage::header(const H_PMediaAuthorizations& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_PMediaAuthorizations::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_PMediaAuthorizations::Type*>(hfvs->getParserContainer()); }
const H_Join::Type& SipMessage::header(const H_Join& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Join::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Join::Type>*>(hfvs->getParserContainer())->front(); } H_Join::Type& SipMessage::header(const H_Join& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_Join::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_Join::Type>*>(hfvs->getParserContainer())->front(); }
const H_TargetDialog::Type& SipMessage::header(const H_TargetDialog& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_TargetDialog::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_TargetDialog::Type>*>(hfvs->getParserContainer())->front(); } H_TargetDialog::Type& SipMessage::header(const H_TargetDialog& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_TargetDialog::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_TargetDialog::Type>*>(hfvs->getParserContainer())->front(); }
const H_PAssertedIdentitys::Type& SipMessage::header(const H_PAssertedIdentitys& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_PAssertedIdentitys::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_PAssertedIdentitys::Type*>(hfvs->getParserContainer()); } H_PAssertedIdentitys::Type& SipMessage::header(const H_PAssertedIdentitys& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_PAssertedIdentitys::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_PAssertedIdentitys::Type*>(hfvs->getParserContainer()); }
const H_PPreferredIdentitys::Type& SipMessage::header(const H_PPreferredIdentitys& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_PPreferredIdentitys::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_PPreferredIdentitys::Type*>(hfvs->getParserContainer()); } H_PPreferredIdentitys::Type& SipMessage::header(const H_PPreferredIdentitys& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_PPreferredIdentitys::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_PPreferredIdentitys::Type*>(hfvs->getParserContainer()); }
const H_AcceptContacts::Type& SipMessage::header(const H_AcceptContacts& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AcceptContacts::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AcceptContacts::Type*>(hfvs->getParserContainer()); } H_AcceptContacts::Type& SipMessage::header(const H_AcceptContacts& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_AcceptContacts::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_AcceptContacts::Type*>(hfvs->getParserContainer()); }
const H_RejectContacts::Type& SipMessage::header(const H_RejectContacts& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_RejectContacts::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_RejectContacts::Type*>(hfvs->getParserContainer()); } H_RejectContacts::Type& SipMessage::header(const H_RejectContacts& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_RejectContacts::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_RejectContacts::Type*>(hfvs->getParserContainer()); }
const H_PCalledPartyId::Type& SipMessage::header(const H_PCalledPartyId& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_PCalledPartyId::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_PCalledPartyId::Type>*>(hfvs->getParserContainer())->front(); } H_PCalledPartyId::Type& SipMessage::header(const H_PCalledPartyId& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_PCalledPartyId::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_PCalledPartyId::Type>*>(hfvs->getParserContainer())->front(); }
const H_PAssociatedUris::Type& SipMessage::header(const H_PAssociatedUris& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_PAssociatedUris::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_PAssociatedUris::Type*>(hfvs->getParserContainer()); } H_PAssociatedUris::Type& SipMessage::header(const H_PAssociatedUris& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), false); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new H_PAssociatedUris::Type(hfvs, headerType.getTypeNum())); } return *dynamic_cast<H_PAssociatedUris::Type*>(hfvs->getParserContainer()); }
const H_ContentLength::Type& SipMessage::header(const H_ContentLength& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentLength::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentLength::Type>*>(hfvs->getParserContainer())->front(); } H_ContentLength::Type& SipMessage::header(const H_ContentLength& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ContentLength::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ContentLength::Type>*>(hfvs->getParserContainer())->front(); }
const H_ReferSub::Type& SipMessage::header(const H_ReferSub& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ReferSub::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ReferSub::Type>*>(hfvs->getParserContainer())->front(); } H_ReferSub::Type& SipMessage::header(const H_ReferSub& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_ReferSub::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_ReferSub::Type>*>(hfvs->getParserContainer())->front(); }
const H_AnswerMode::Type& SipMessage::header(const H_AnswerMode& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_AnswerMode::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_AnswerMode::Type>*>(hfvs->getParserContainer())->front(); } H_AnswerMode::Type& SipMessage::header(const H_AnswerMode& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_AnswerMode::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_AnswerMode::Type>*>(hfvs->getParserContainer())->front(); }
const H_PrivAnswerMode::Type& SipMessage::header(const H_PrivAnswerMode& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_PrivAnswerMode::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_PrivAnswerMode::Type>*>(hfvs->getParserContainer())->front(); } H_PrivAnswerMode::Type& SipMessage::header(const H_PrivAnswerMode& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_PrivAnswerMode::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_PrivAnswerMode::Type>*>(hfvs->getParserContainer())->front(); }
const H_RemotePartyId::Type& SipMessage::header(const H_RemotePartyId& headerType) const { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_RemotePartyId::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_RemotePartyId::Type>*>(hfvs->getParserContainer())->front(); } H_RemotePartyId::Type& SipMessage::header(const H_RemotePartyId& headerType) { HeaderFieldValueList* hfvs = ensureHeaders(headerType.getTypeNum(), true); if (hfvs->getParserContainer() == 0) { hfvs->setParserContainer(new ParserContainer<H_RemotePartyId::Type>(hfvs, headerType.getTypeNum())); } return dynamic_cast<ParserContainer<H_RemotePartyId::Type>*>(hfvs->getParserContainer())->front(); }
