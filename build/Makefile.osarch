# $Id: Makefile.osarch,v 1.12 2004/02/18 22:56:38 jason Exp $

######################################################################

# these options are NECESSARY options for a give operating system or
# architecture.  If they could or should be turned off, they shouldn't
# be here (or they should be wrapped in if code that is controllable
# in Makefile.pre (now - moved from Makefile.opt)


############################## FreeBSD ##############################

# recent FreeBSDs (as of 6/1999) should have a sufficiently modern
# version of ecgs to build this code cleanly with the default c++
# compiler, but the releases generally don't.  install the ecgs
# port/package for older versions.

ifeq ($(OSTYPE),FreeBSD)

    USE_LIBGETOPT = 1
    USE_R_WRAPPER = 1
endif

############################## Linux ##############################

ifeq ($(OSTYPE),Linux)

ifeq ($(ARCH),i686)
	CXXFLAGS += -march=i686
endif
ifeq ($(ARCH),i486)
	CXXFLAGS += -march=i486
endif
ifeq ($(ARCH),i386)
	CXXFLAGS += -march=i386
endif

	CXXFLAGS += -D_REENTRANT 
	CFLAGS   += -D_REENTRANT 
	DISTCC   = distcc 
	CCACHE   = ccache
        LDLIBS_LAST   += -lpopt
endif


############################# QNX ##################################

ifeq ($(OSTYPE),QNX)

    CXXFLAGS += -D_REENTRANT
    CFLAGS   += -D_REENTRANT
    LDLIBS_LAST   += -lsocket -lstdc++ 
    USE_SSL = false
    USE_DTLS = false
endif


############################## Solaris ##############################

ifeq ($(OSTYPE),SunOS)

    USE_LIBGETOPT = 1
    CFLAGS   += -DSUNXIL_WARNING_DISABLE -I/opt/sfw/include
    CXXFLAGS += -DSUNXIL_WARNING_DISABLE -I/opt/sfw/include
    LDFLAGS  += -L/opt/sfw/lib

    ifeq ($(USE_POPT), true)
      CFLAGS   += -DHAVE_POPT_H 
      CXXFLAGS += -DHAVE_POPT_H 
      LDLIBS_LAST   += -lpopt
    endif

    ifeq ($(VOCAL_TOOLCHAIN_TYPE),gnu)
        CXXFLAGS += -D_REENTRANT
        CFLAGS   += -D_REENTRANT
        LDLIBS_LAST   += -R/usr/local/lib -lnsl -lsocket
    else
        CXXFLAGS += -D_REENTRANT -mt -D_RWSTD_MULTI_THREAD -dalign -xarch=v8plus
        CFLAGS   += -D_REENTRANT -xarch=v8plus
        LDFLAGS  +=  -DTHREAD=MULTI -mt  -dalign -xarch=v8plus -L/opt/SUNWspro/WS6/lib/rw7 -L/opt/SUNWspro/WS6/lib/ 
        LDLIBS_LAST   += -lrwtool -liostream -lnsl -lsocket -lCstd
    endif

endif


############################## MacOS X ##############################

# Mac OS X is missing poll and some pthreads bits which are built by
# the 

ifeq ($(OSTYPE),Darwin)
    CXXFLAGS += -D_REENTRANT -I/opt/sfw/include
    CFLAGS   += -D_REENTRANT -I/opt/sfw/include
    LDFLAGS  += -L/opt/sfw/lib
    LDLIBS_LAST   += -lpopt

    USE_LIBGETOPT = 1
    USE_R_WRAPPER = 1
endif


############################ cygwin ##################################

ifeq ($(OSTYPE),cygwin)
    USE_LIBGETOPT = 1
    CFLAGS += -I$(ROOT)/contrib/win32/mingw/include -I$(ROOT)/contrib/win32/pthreads
    CXXFLAGS += -I$(ROOT)/contrib/win32/mingw/include -I$(ROOT)/contrib/win32/pthreads
    LDLIBS_LAST   += -lpopt
endif


ifeq ($(VOCAL_PROCESSOR_OPTS),1)
    ifeq ($(ARCH),i686)
        CXXFLAGS += -march=i686
        CFLAGS += -march=i686
        LDFLAGS  +=
        LDLIBS	 +=
    endif
endif



# set up general compilation options

LDFLAGS  += 
CXXFLAGS += 
CFLAGS   += 
LDLIBS   +=
INCDIRS  += 



######################################################################

# this section lets you override the default compile type

######################################################################

ifdef CODE_OPTIMIZE
VOCAL_COMPILE_TYPE := opt
endif

ifdef CODE_GOPTIMIZE
VOCAL_COMPILE_TYPE := gopt
endif

ifdef CODE_PROFILE
VOCAL_COMPILE_TYPE := prof
endif

ifdef CODE_NODEBUG
VOCAL_COMPILE_TYPE := nodebug
endif

ifdef CODE_SMALL
VOCAL_COMPILE_TYPE := small
endif

ifdef LIB_DYNAMIC
BUILD_SHARED_LIBS := yes
endif

TARGET_TYPE := $(VOCAL_COMPILE_TYPE)


ifeq ($(VOCAL_COMPILE_TYPE),small)
CXXFLAGS += $(COMPILE_SMALL_FLAG)
CFLAGS += $(COMPILE_SMALL_FLAG)
endif

ifeq ($(VOCAL_COMPILE_TYPE),nodebug)
endif

ifeq ($(VOCAL_COMPILE_TYPE),debug)
CXXFLAGS += $(DEBUG_FLAG)
CFLAGS   += $(DEBUG_FLAG)
endif

ifeq ($(VOCAL_COMPILE_TYPE),opt)
CXXFLAGS += $(OPTFLAGS) #-DNDEBUG
CFLAGS += $(OPTFLAGS) #-DNDEBUG
endif

ifeq ($(VOCAL_COMPILE_TYPE),gopt)
CXXFLAGS += $(DEBUG_FLAG) $(OPTFLAGS) 
CFLAGS   += $(DEBUG_FLAG) $(OPTFLAGS) 
endif


# profiling

ifeq ($(VOCAL_COMPILE_TYPE),prof)
LDFLAGS  += -pg $(OPTFLAGS) -DNDEBUG
CXXFLAGS += -pg $(OPTFLAGS) -DNDEBUG
CFLAGS   += -pg $(OPTFLAGS) -DNDEBUG
endif

ifeq ($(USE_SSL),true)
DEFINES += USE_SSL
endif

ifeq ($(USE_DTLS),true)
DEFINES += USE_DTLS
endif

######################################################################
#              More Toolchain defaults
######################################################################


ifeq ($(OSCLASS),VXWORKS)

# these are VxWorks defaults

# by default, we will use a real linker as the linker

ifndef LINKER
LINKER = $(LD)
endif

LDFLAGS += -Ur

endif




# SH hardware -- this code should actually be separated as this is
# toolchain stuff, by and large.


ifeq ($(ARCH),sh)

CXX=sh-wrs-vxworks-g++
DEP=sh-wrs-vxworks-gcc
CC=sh-wrs-vxworks-gcc
AR=sh-wrs-vxworks-ar
LD=sh-wrs-vxworks-ld
CROSS_COMPILE=1
DEFINES += BSD43_COMPATIBLE
CXXFLAGS += 
CFLAGS   += 
LDFLAGS  += -L/usr/local/lib/gcc-lib/sh-wrs-vxworks/2.95.1/m2
LDLIBS_LAST   +=  -lstdc++ -lgcc
OSCLASS = VXWORKS

endif

OS_ARCH  := $(OSTYPE).$(ARCH)
TARGET_NAME := $(TARGET_TYPE).$(OS_ARCH)
