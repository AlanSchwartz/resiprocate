#!/usr/bin/perl -ws

######################################################################
# Usage:
#   ./configure [-y]
#
#   Options:
#     -y  Run non-interactively
######################################################################

# Change directory so that we can find the Makefile.conf file
$mydir = $0;
$mydir =~ s/\/[^\/]*$//;
chdir ($mydir);

$uname = `uname`;

@toolchains = ('gnu','intel','armcross','sunpro','msgnu');
@yesno = ('yes','no');

@parameters = (
  {
    name        => "VOCAL_TOOLCHAIN_TYPE",
    description => "Which toolchain do you want to use?",
    default     => &detectToolchain,
    validate    => [@toolchains],
  },
  {
    name        => "VOCAL_CROSS_ROOT",
    description => "Where is your cross compiler installed?",
    default     => "/skiff/local/bin",
  },
  {
    name        => "BUILD_SHARED_LIBS",
    description => "Should the resip libraries be built shared?",
    default     => "no",
    validate    => [@yesno],
  },
  {
    name        => "USE_DISTCC",
    description => "Will you be using distcc?",
    default     => &detectDistcc,
    validate    => [@yesno],
  },
  {
    name        => "USE_CCACHE",
    description => "Will you be using ccache?",
    default     => "no",
    validate    => [@yesno],
  },
  {
    name        => "USE_DTLS",
    description => "Do you want to include DTLS support?",
    default     => "no",
    validate    => [@yesno],
  },
  {
    name        => "USE_SSL",
    description => "Do you want to include SSL support?",
    default     => "yes",
    validate    => [@yesno],
  },
  {
    name        => "USE_POPT",
    description => "Should the binaries use popt to read commandline options?",
    default     => "yes",
    validate    => [@yesno],
  },
  {
    name        => "USE_CURL",
    description => "Should DUM use CURL to retreive identity information?",
    default     => "no",
    validate    => [@yesno],
  },
  {
    name        => "USE_GOOGLE_MALLOC",
    description => "Use the Google malloc() implementation?",
    default     => "no",
    validate    => [@yesno],
  },
  {
    name        => "USE_GOOGLE_CPUPERF",
    description => "Use Google cpuperf?",
    default     => "no",
    validate    => [@yesno],
  },
  {
    name        => "USE_IPV6",
    description => "Compile in IPv6 support?",
    default     => "no",
    validate    => [@yesno],
  },
  {
    name        => "INSTALL_PREFIX",
    description => "Where should the libraries be installed?",
    default     => "/usr/local",
  },
);

if (open (CONF, "build/Makefile.conf"))
{
  print "Reading current configuration...\n\n";
  while (<CONF>)
  {
    chomp;
    if (/([^ :=]+) *:?= *([^ #]*)/)
    {
      $config{$1} = $2;
    }
  }
  close (CONF);
}

foreach $parameter (@parameters)
{
  if (!exists($config{$parameter->{name}}))
  {
    $config{$parameter->{name}} = $parameter->{default};
  }

  # If we're not cross compiling, don't ask about the cross compiler.
  if ($parameter->{name} eq "VOCAL_CROSS_ROOT"
      && $config{VOCAL_TOOLCHAIN_TYPE} !~ /cross/)
  {
    next;
  }

  # If we're running interactively, confirm with the user
  if (!$y)
  {
    do
    {
      if (exists($parameter->{validate}) && 
          !&validate($config{$parameter->{name}},@{$parameter->{validate}}))
      {
        print "*** '$config{$parameter->{name}}' is not a valid value for ".
              "$parameter->{name}\n\n";
        $config{$parameter->{name}} = $parameter->{default};
      }

      print "".$parameter->{description}."\n";

      if (exists $parameter->{validate})
      {
        print "(".join(', ',@{$parameter->{validate}}).") ";
      }

      print "[".$config{$parameter->{name}}."] ";
      $userinput = readline(*STDIN);
      chomp ($userinput);
      if (length($userinput))
      {
        $config{$parameter->{name}} = $userinput;
      }
      print "\n";
    }
    until (!exists($parameter->{validate}) ||
           &validate($config{$parameter->{name}},@{$parameter->{validate}}));
  }

  if (exists($parameter->{validate}) && 
      !&validate($config{$parameter->{name}},@{$parameter->{validate}}))
  {
    print "*** '$config{$parameter->{name}}' is not a valid value for ".
          "$parameter->{name} -- using default: $parameter->{default}\n";
    $config{$parameter->{name}} = $parameter->{default};
  }

}

# Supress warning
$y = $y;

# Write out the resulting configure file to Makefile.conf
open (CONF, ">build/Makefile.conf") || die "Could not write to build/Makefile.conf: $!";
print "Writing Makefile.conf...\n";
foreach $parameter (@parameters)
{
  print CONF ($parameter->{name}." := ".$config{$parameter->{name}}."\n");
}
close (CONF);

######################################################################
sub validate
{
  my ($value, @allowed) = @_;
  my ($allowed);

  if (@allowed == 0)
  {
    return 1;
  }

  foreach $allowed (@allowed)
  {
    if ($value eq $allowed)
    {
      return 1;
    }
  }

  return 0;
}

######################################################################
# Here are functions to determine reasonable defaults

sub detectToolchain
{
  if ($uname =~ /SunOS/ || $uname =~ /Solaris/)
  {
    return "sunpro";
  }
  "gnu";
}

sub detectDistcc
{
  if ($ENV{DISTCC_HOSTS})
  {
    return "yes";
  }
  "no";
}
