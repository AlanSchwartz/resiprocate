# Copyright 2007 Estacado Systems

PROJECT(RESIPROCATE)
INCLUDE(CMakeDetermineSystem)
SET(USE_ARES "on")
SET(BUILD_SHARED_LIBS "off" CACHE BOOL "Build as shared libraries?")
SET(USE_DISTCC "off" CACHE BOOL "Use distcc?")
SET(USE_CCACHE "off" CACHE BOOL "Use ccache?")
SET(USE_DTLS "off" CACHE BOOL "Use DTLS?")
SET(USE_SSL "on" CACHE BOOL "Use SSL?")
SET(USE_POPT "on" CACHE BOOL "Use popt to read commandline options?")
SET(USE_CURL "off" CACHE BOOL "Should DUM use curl to retrieve identity information?")
SET(USE_GOOGLE_MALLOC "off" CACHE BOOL "Use google malloc?")
SET(USE_DEBUG_MALLOC "off" CACHE BOOL "Use debug malloc?")
SET(USE_EFENCE "off" CACHE BOOL "Use ElectricFence memory debugger?")
SET(USE_GOOGLE_CPUPERF "off" "Use google profiler?")
SET(USE_IPV6 "off" CACHE BOOL "Compile in IPV6 support?")

SET(BUILD_DUM "on" CACHE BOOL "Build DUM?")
SET(BUILD_REPRO "on" CACHE BOOL "Build repro?")
SET(BUILD_TESTS "on" CACHE BOOL "Build tests?")
SET(BUILD_TFM "on" CACHE BOOL "Build TFM?")

IF(NOT BUILD_DUM)
  IF(BUILD_REPRO)
    MESSAGE("Disabling repro because DUM is not being built.")
    SET(BUILD_REPRO "off")
  ENDIF(BUILD_REPRO)
ENDIF(NOT BUILD_DUM)

IF(NOT BUILD_REPRO)
  IF(BUILD_TFM)
    MESSAGE("Disabling TFM because repro is not being built.")
    SET(BUILD_TFM "off")
  ENDIF(BUILD_TFM)
ENDIF(NOT BUILD_REPRO)


SET(RESIPROCATE_LIBS resip rutil log4cplus ares pthread )
SET(DUM_LIBS "dum")

IF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
  SET(USE_LIBGETOPT "on")
  SET(USE_R_WRAPPER "on")
ENDIF(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")

IF(CMAKE_SYSTEM_NAME MATCHES "NetBSD")
  ADD_DEFINITIONS(-D_REENTRANT)
ENDIF(CMAKE_SYSTEM_NAME MATCHES "NetBSD")

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
  ADD_DEFINITIONS(-D_REENTRANT)
  IF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i686)
    ADD_DEFINITIONS(-march=i686)
  ENDIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i686)
  IF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i586)
    ADD_DEFINITIONS(-march=i586)
  ENDIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i586)
  IF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i486)
    ADD_DEFINITIONS(-march=i486)
  ENDIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i486)
ENDIF(CMAKE_SYSTEM_NAME MATCHES "Linux")

IF(CMAKE_SYSTEM_NAME MATCHES "QNX")
   ADD_DEFINITIONS("-D_REENTRANT")
   SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} socket stdc++)
   SET(USE_SSL off)
ENDIF(CMAKE_SYSTEM_NAME MATCHES "QNX")


############################## Solaris ##############################
IF(CMAKE_SYSTEM_NAME MATCHES "SunOS")
   INCLUDE(${MODULE_PATH}/CMakeDetermineCCompiler.cmake)
   SET(USE_LIBGETOPT on)
   ADD_DEFINITIONS(-DSUNXIL_WARNING_DISABLE -DREENTRANT)
   INCLUDE_DIRECTORIES( /opt/sfw/include /opt/csw/include )
   LINK_DIRECTORIES( /opt/sfw/lib /opt/csw/lib )
   IF(CMAKE_COMPILER_IS_GNUCC)
     SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} nsl socket)
   ELSE(CMAKE_COMPILER_IS_GNUCC)
     ADD_DEFINITIONS(-mt)
     SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -library=stlport4)
     SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} iostream socket nsl rt)
   ENDIF(CMAKE_COMPILER_IS_GNUCC)
ENDIF(CMAKE_SYSTEM_NAME MATCHES "SunOS")

IF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
   ADD_DEFINITIONS(-D_REENTRANT)
   INCLUDE_DIRECTORIES(/sw/include /opt/local/include)
   LINK_DIRECTORIES(/sw/lib /opt/local/lib)
   SET(USE_LIBGETOPT on)
   SET(USE_R_WRAPPER on)
ENDIF(CMAKE_SYSTEM_NAME MATCHES "Darwin")

############################ cygwin ##################################
IF(CMAKE_SYSTEM_NAME MATCHES "CYGWIN")
  SET(USE_LIBGETOPT on)
  INCLUDE_DIRECTORIES(${ROOT}/contrib/win32/mingw/include ${ROOT}/contrib/win32/pthreads)
  
  IF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i686)
    SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -march=i686)
  ENDIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i686)
  IF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i586)
    SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -march=i586)
  ENDIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i586)
  IF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i486)
    SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -march=i486)
  ENDIF(${CMAKE_SYSTEM_PROCESSOR} MATCHES i486)

ENDIF(CMAKE_SYSTEM_NAME MATCHES "CYGWIN")

IF(USE_GOOGLE_CPUPERF)
   SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} profiler)
ENDIF(USE_GOOGLE_CPUPERF)

IF(USE_GOOGLE_MALLOC)
   SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} tcmalloc)
ENDIF(USE_GOOGLE_MALLOC)

IF(USE_DEBUG_MALLOC)
   SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} dmallocthcxx)
ENDIF(USE_DEBUG_MALLOC)

IF(USE_EFENCE)
   SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} efence)
ENDIF(USE_EFENCE)

IF(USE_ARES)
  IF(USE_IPV6)
    SET(ARES_IPV6 "--with-ipv6")
  ENDIF(USE_IPV6)
  SET(ARES_PREFIX_ARG "--prefix=${CMAKE_INSTALL_PREFIX}")
  ADD_DEFINITIONS(-DUSE_ARES)
  MAKE_DIRECTORY("${RESIPROCATE_BINARY_DIR}/contrib/ares")
  SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} "ares")
  LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${RESIPROCATE_BINARY_DIR}/contrib/ares )
  IF(NOT EXISTS ${RESIPROCATE_BINARY_DIR}/contrib/ares/Makefile)
    EXEC_PROGRAM( "/${RESIPROCATE_SOURCE_DIR}/contrib/ares/configure" "/${RESIPROCATE_BINARY_DIR}/contrib/ares/"
                  ARGS ${ARES_IPV6} ${ARES_PREFIX_ARG} )
  ENDIF(NOT EXISTS ${RESIPROCATE_BINARY_DIR}/contrib/ares/Makefile)
  ADD_CUSTOM_TARGET("${RESIPROCATE_BINARY_DIR}/contrib/ares/libares.a" ALL
                    COMMAND "make"
                    WORKING_DIRECTORY "${RESIPROCATE_BINARY_DIR}/contrib/ares")

ENDIF(USE_ARES)

IF(USE_POPT)
  SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} popt)
  ADD_DEFINITIONS(-DHAVE_POPT_H)
ENDIF(USE_POPT)

IF(USE_SSL)
  SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} ssl crypto )
  ADD_DEFINITIONS(-DUSE_SSL)
ENDIF(USE_SSL)

IF(USE_CURL)
  SET(DUM_LIBS ${DUM_LIBS} curl)
  ADD_DEFINITIONS(-DUSE_CURL)
ENDIF(USE_CURL)

IF(USE_DTLS)
  SET(RESIPROCATE_LIBS ${RESIPROCATE_LIBS} ssl crypto )
  ADD_DEFINITIONS(-DUSE_DTLS -DUSE_SSL)
ENDIF(USE_DTLS)

LINK_DIRECTORIES(${RESIPROCATE_BINARY_DIR}/rutil ${RESIPROCATE_BINARY_DIR}/resip/stack ${RESIPROCATE_BINARY_DIR}/resip/stack/dum)

ADD_SUBDIRECTORY(rutil)
ADD_SUBDIRECTORY(resip)

IF(BUILD_REPRO)
  ADD_SUBDIRECTORY(repro)
ENDIF(BUILD_REPRO)

IF(BUILD_TFM)
  ADD_SUBDIRECTORY(tfm)
ENDIF(BUILD_TFM)
