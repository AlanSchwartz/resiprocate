      struct {
        opaque id[16];
      } NodeId;

      struct {
        opaque       id<0..2^8-1>;
      } ResourceId;
      
      enum {reserved(0), peer(1), resource(2), compressed(3), (255) }
           DestinationType;
     

      struct {
        DestinationType         type;
        uint8                   length;

        select (type) {
          case peer:
             NodeId               node_id;
          
          case resource:
             ResourceId           resource_id;
        
          case compressed:
             opaque               compressed_id<0..2^8-1>;
           
          /* This structure may be extended with new types */
        
        } DestinationData;
      } Destination;

       enum {reserved1(0), signer_identity_peer (1), 
             signer_identity_name (2), signer_identity_certificate (3), 
             (255)} SignerIdentityType;

       struct {
         SignerIdentityType     identity_type;
         opaque			signer_identity<0..2^16-1>;
       } SignerIdentity;

       struct {
          uint8 sig;
          uint8 hash;
       }  SignatureAndHashAlgorithm;	

       struct  {
          SignatureAndHashAlgorithm     algorithm;
          SignerIdentity                identity;
          opaque                        signature_value<0..2^16-1>;
       } Signature;

struct {
       uint8   relo_token;
       uint32  overlay;
       uint8   ttl;
       uint8   reserved;
       uint16  fragment;
       uint8   version;
       uint24  length;
       uint64  transaction_id;
       uint16  flags;

       Destination via_list<0..2^16-1>;
       Destination destination_list<0..2^16-1>;
       uint16  route_log_len_dummy;
       uint16  message_code;
       opaque  payload<0..2^24-1>;
       Signature sig;
} ForwardingLayerMessage;