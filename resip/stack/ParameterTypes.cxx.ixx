// !bwc! I apologize that this is so ugly. If you know of a standard GNU utility that will re-indent uglified c++ code (like this), let me know...
// Generated by updateParameters.sh 





ParameterTypes::Type data_Param::getTypeNum() const {return ParameterTypes::data;} data_Param::data_Param() { ParameterTypes::ParameterFactories[ParameterTypes::data] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::data] = "data"; } data_Param resip::p_data;
ParameterTypes::Type control_Param::getTypeNum() const {return ParameterTypes::control;} control_Param::control_Param() { ParameterTypes::ParameterFactories[ParameterTypes::control] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::control] = "control"; } control_Param resip::p_control;
ParameterTypes::Type mobility_Param::getTypeNum() const {return ParameterTypes::mobility;} mobility_Param::mobility_Param() { ParameterTypes::ParameterFactories[ParameterTypes::mobility] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::mobility] = "mobility"; } mobility_Param resip::p_mobility;
ParameterTypes::Type description_Param::getTypeNum() const {return ParameterTypes::description;} description_Param::description_Param() { ParameterTypes::ParameterFactories[ParameterTypes::description] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::description] = "description"; } description_Param resip::p_description;
ParameterTypes::Type events_Param::getTypeNum() const {return ParameterTypes::events;} events_Param::events_Param() { ParameterTypes::ParameterFactories[ParameterTypes::events] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::events] = "events"; } events_Param resip::p_events;
ParameterTypes::Type priority_Param::getTypeNum() const {return ParameterTypes::priority;} priority_Param::priority_Param() { ParameterTypes::ParameterFactories[ParameterTypes::priority] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::priority] = "priority"; } priority_Param resip::p_priority;
ParameterTypes::Type methods_Param::getTypeNum() const {return ParameterTypes::methods;} methods_Param::methods_Param() { ParameterTypes::ParameterFactories[ParameterTypes::methods] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::methods] = "methods"; } methods_Param resip::p_methods;
ParameterTypes::Type schemes_Param::getTypeNum() const {return ParameterTypes::schemes;} schemes_Param::schemes_Param() { ParameterTypes::ParameterFactories[ParameterTypes::schemes] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::schemes] = "schemes"; } schemes_Param resip::p_schemes;
ParameterTypes::Type application_Param::getTypeNum() const {return ParameterTypes::application;} application_Param::application_Param() { ParameterTypes::ParameterFactories[ParameterTypes::application] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::application] = "application"; } application_Param resip::p_application;
ParameterTypes::Type video_Param::getTypeNum() const {return ParameterTypes::video;} video_Param::video_Param() { ParameterTypes::ParameterFactories[ParameterTypes::video] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::video] = "video"; } video_Param resip::p_video;
ParameterTypes::Type language_Param::getTypeNum() const {return ParameterTypes::language;} language_Param::language_Param() { ParameterTypes::ParameterFactories[ParameterTypes::language] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::language] = "language"; } language_Param resip::p_language;
ParameterTypes::Type type_Param::getTypeNum() const {return ParameterTypes::type;} type_Param::type_Param() { ParameterTypes::ParameterFactories[ParameterTypes::type] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::type] = "type"; } type_Param resip::p_type;
ParameterTypes::Type isFocus_Param::getTypeNum() const {return ParameterTypes::isFocus;} isFocus_Param::isFocus_Param() { ParameterTypes::ParameterFactories[ParameterTypes::isFocus] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::isFocus] = "isfocus"; } isFocus_Param resip::p_isFocus;
ParameterTypes::Type actor_Param::getTypeNum() const {return ParameterTypes::actor;} actor_Param::actor_Param() { ParameterTypes::ParameterFactories[ParameterTypes::actor] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::actor] = "actor"; } actor_Param resip::p_actor;
ParameterTypes::Type text_Param::getTypeNum() const {return ParameterTypes::text;} text_Param::text_Param() { ParameterTypes::ParameterFactories[ParameterTypes::text] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::text] = "text"; } text_Param resip::p_text;
ParameterTypes::Type extensions_Param::getTypeNum() const {return ParameterTypes::extensions;} extensions_Param::extensions_Param() { ParameterTypes::ParameterFactories[ParameterTypes::extensions] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::extensions] = "extensions"; } extensions_Param resip::p_extensions;
ParameterTypes::Type Instance_Param::getTypeNum() const {return ParameterTypes::Instance;} Instance_Param::Instance_Param() { ParameterTypes::ParameterFactories[ParameterTypes::Instance] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::Instance] = "+sip.instance"; } Instance_Param resip::p_Instance;
ParameterTypes::Type regid_Param::getTypeNum() const {return ParameterTypes::regid;} regid_Param::regid_Param() { ParameterTypes::ParameterFactories[ParameterTypes::regid] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::regid] = "reg-id"; } regid_Param resip::p_regid;
ParameterTypes::Type ob_Param::getTypeNum() const {return ParameterTypes::ob;} ob_Param::ob_Param() { ParameterTypes::ParameterFactories[ParameterTypes::ob] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::ob] = "ob"; } ob_Param resip::p_ob;
ParameterTypes::Type pubGruu_Param::getTypeNum() const {return ParameterTypes::pubGruu;} pubGruu_Param::pubGruu_Param() { ParameterTypes::ParameterFactories[ParameterTypes::pubGruu] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::pubGruu] = "pub-gruu"; } pubGruu_Param resip::p_pubGruu;
ParameterTypes::Type tempGruu_Param::getTypeNum() const {return ParameterTypes::tempGruu;} tempGruu_Param::tempGruu_Param() { ParameterTypes::ParameterFactories[ParameterTypes::tempGruu] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::tempGruu] = "temp-gruu"; } tempGruu_Param resip::p_tempGruu;
ParameterTypes::Type gruu_Param::getTypeNum() const {return ParameterTypes::gruu;} gruu_Param::gruu_Param() { ParameterTypes::ParameterFactories[ParameterTypes::gruu] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::gruu] = "gruu"; } gruu_Param resip::p_gruu;
ParameterTypes::Type accessType_Param::getTypeNum() const {return ParameterTypes::accessType;} accessType_Param::accessType_Param() { ParameterTypes::ParameterFactories[ParameterTypes::accessType] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::accessType] = "access-type"; } accessType_Param resip::p_accessType;
ParameterTypes::Type algorithm_Param::getTypeNum() const {return ParameterTypes::algorithm;} algorithm_Param::algorithm_Param() { ParameterTypes::ParameterFactories[ParameterTypes::algorithm] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::algorithm] = "algorithm"; } algorithm_Param resip::p_algorithm;
ParameterTypes::Type boundary_Param::getTypeNum() const {return ParameterTypes::boundary;} boundary_Param::boundary_Param() { ParameterTypes::ParameterFactories[ParameterTypes::boundary] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::boundary] = "boundary"; } boundary_Param resip::p_boundary;
ParameterTypes::Type branch_Param::getTypeNum() const {return ParameterTypes::branch;} branch_Param::branch_Param() { ParameterTypes::ParameterFactories[ParameterTypes::branch] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::branch] = "branch"; } branch_Param resip::p_branch;
ParameterTypes::Type charset_Param::getTypeNum() const {return ParameterTypes::charset;} charset_Param::charset_Param() { ParameterTypes::ParameterFactories[ParameterTypes::charset] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::charset] = "charset"; } charset_Param resip::p_charset;
ParameterTypes::Type cnonce_Param::getTypeNum() const {return ParameterTypes::cnonce;} cnonce_Param::cnonce_Param() { ParameterTypes::ParameterFactories[ParameterTypes::cnonce] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::cnonce] = "cnonce"; } cnonce_Param resip::p_cnonce;
ParameterTypes::Type comp_Param::getTypeNum() const {return ParameterTypes::comp;} comp_Param::comp_Param() { ParameterTypes::ParameterFactories[ParameterTypes::comp] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::comp] = "comp"; } comp_Param resip::p_comp;
ParameterTypes::Type dAlg_Param::getTypeNum() const {return ParameterTypes::dAlg;} dAlg_Param::dAlg_Param() { ParameterTypes::ParameterFactories[ParameterTypes::dAlg] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::dAlg] = "d-alg"; } dAlg_Param resip::p_dAlg;
ParameterTypes::Type dQop_Param::getTypeNum() const {return ParameterTypes::dQop;} dQop_Param::dQop_Param() { ParameterTypes::ParameterFactories[ParameterTypes::dQop] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::dQop] = "d-qop"; } dQop_Param resip::p_dQop;
ParameterTypes::Type dVer_Param::getTypeNum() const {return ParameterTypes::dVer;} dVer_Param::dVer_Param() { ParameterTypes::ParameterFactories[ParameterTypes::dVer] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::dVer] = "d-ver"; } dVer_Param resip::p_dVer;
ParameterTypes::Type directory_Param::getTypeNum() const {return ParameterTypes::directory;} directory_Param::directory_Param() { ParameterTypes::ParameterFactories[ParameterTypes::directory] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::directory] = "directory"; } directory_Param resip::p_directory;
ParameterTypes::Type domain_Param::getTypeNum() const {return ParameterTypes::domain;} domain_Param::domain_Param() { ParameterTypes::ParameterFactories[ParameterTypes::domain] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::domain] = "domain"; } domain_Param resip::p_domain;
ParameterTypes::Type duration_Param::getTypeNum() const {return ParameterTypes::duration;} duration_Param::duration_Param() { ParameterTypes::ParameterFactories[ParameterTypes::duration] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::duration] = "duration"; } duration_Param resip::p_duration;
ParameterTypes::Type expiration_Param::getTypeNum() const {return ParameterTypes::expiration;} expiration_Param::expiration_Param() { ParameterTypes::ParameterFactories[ParameterTypes::expiration] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::expiration] = "expiration"; } expiration_Param resip::p_expiration;
ParameterTypes::Type expires_Param::getTypeNum() const {return ParameterTypes::expires;} expires_Param::expires_Param() { ParameterTypes::ParameterFactories[ParameterTypes::expires] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::expires] = "expires"; } expires_Param resip::p_expires;
ParameterTypes::Type filename_Param::getTypeNum() const {return ParameterTypes::filename;} filename_Param::filename_Param() { ParameterTypes::ParameterFactories[ParameterTypes::filename] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::filename] = "filename"; } filename_Param resip::p_filename;
ParameterTypes::Type fromTag_Param::getTypeNum() const {return ParameterTypes::fromTag;} fromTag_Param::fromTag_Param() { ParameterTypes::ParameterFactories[ParameterTypes::fromTag] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::fromTag] = "from-tag"; } fromTag_Param resip::p_fromTag;
ParameterTypes::Type handling_Param::getTypeNum() const {return ParameterTypes::handling;} handling_Param::handling_Param() { ParameterTypes::ParameterFactories[ParameterTypes::handling] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::handling] = "handling"; } handling_Param resip::p_handling;
ParameterTypes::Type id_Param::getTypeNum() const {return ParameterTypes::id;} id_Param::id_Param() { ParameterTypes::ParameterFactories[ParameterTypes::id] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::id] = "id"; } id_Param resip::p_id;
ParameterTypes::Type lr_Param::getTypeNum() const {return ParameterTypes::lr;} lr_Param::lr_Param() { ParameterTypes::ParameterFactories[ParameterTypes::lr] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::lr] = "lr"; } lr_Param resip::p_lr;
ParameterTypes::Type maddr_Param::getTypeNum() const {return ParameterTypes::maddr;} maddr_Param::maddr_Param() { ParameterTypes::ParameterFactories[ParameterTypes::maddr] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::maddr] = "maddr"; } maddr_Param resip::p_maddr;
ParameterTypes::Type method_Param::getTypeNum() const {return ParameterTypes::method;} method_Param::method_Param() { ParameterTypes::ParameterFactories[ParameterTypes::method] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::method] = "method"; } method_Param resip::p_method;
ParameterTypes::Type micalg_Param::getTypeNum() const {return ParameterTypes::micalg;} micalg_Param::micalg_Param() { ParameterTypes::ParameterFactories[ParameterTypes::micalg] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::micalg] = "micalg"; } micalg_Param resip::p_micalg;
ParameterTypes::Type mode_Param::getTypeNum() const {return ParameterTypes::mode;} mode_Param::mode_Param() { ParameterTypes::ParameterFactories[ParameterTypes::mode] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::mode] = "mode"; } mode_Param resip::p_mode;
ParameterTypes::Type name_Param::getTypeNum() const {return ParameterTypes::name;} name_Param::name_Param() { ParameterTypes::ParameterFactories[ParameterTypes::name] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::name] = "name"; } name_Param resip::p_name;
ParameterTypes::Type nc_Param::getTypeNum() const {return ParameterTypes::nc;} nc_Param::nc_Param() { ParameterTypes::ParameterFactories[ParameterTypes::nc] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::nc] = "nc"; } nc_Param resip::p_nc;
ParameterTypes::Type nonce_Param::getTypeNum() const {return ParameterTypes::nonce;} nonce_Param::nonce_Param() { ParameterTypes::ParameterFactories[ParameterTypes::nonce] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::nonce] = "nonce"; } nonce_Param resip::p_nonce;
ParameterTypes::Type opaque_Param::getTypeNum() const {return ParameterTypes::opaque;} opaque_Param::opaque_Param() { ParameterTypes::ParameterFactories[ParameterTypes::opaque] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::opaque] = "opaque"; } opaque_Param resip::p_opaque;
ParameterTypes::Type permission_Param::getTypeNum() const {return ParameterTypes::permission;} permission_Param::permission_Param() { ParameterTypes::ParameterFactories[ParameterTypes::permission] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::permission] = "permission"; } permission_Param resip::p_permission;
ParameterTypes::Type protocol_Param::getTypeNum() const {return ParameterTypes::protocol;} protocol_Param::protocol_Param() { ParameterTypes::ParameterFactories[ParameterTypes::protocol] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::protocol] = "protocol"; } protocol_Param resip::p_protocol;
ParameterTypes::Type purpose_Param::getTypeNum() const {return ParameterTypes::purpose;} purpose_Param::purpose_Param() { ParameterTypes::ParameterFactories[ParameterTypes::purpose] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::purpose] = "purpose"; } purpose_Param resip::p_purpose;
ParameterTypes::Type q_Param::getTypeNum() const {return ParameterTypes::q;} q_Param::q_Param() { ParameterTypes::ParameterFactories[ParameterTypes::q] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::q] = "q"; } q_Param resip::p_q;
ParameterTypes::Type realm_Param::getTypeNum() const {return ParameterTypes::realm;} realm_Param::realm_Param() { ParameterTypes::ParameterFactories[ParameterTypes::realm] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::realm] = "realm"; } realm_Param resip::p_realm;
ParameterTypes::Type reason_Param::getTypeNum() const {return ParameterTypes::reason;} reason_Param::reason_Param() { ParameterTypes::ParameterFactories[ParameterTypes::reason] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::reason] = "reason"; } reason_Param resip::p_reason;
ParameterTypes::Type received_Param::getTypeNum() const {return ParameterTypes::received;} received_Param::received_Param() { ParameterTypes::ParameterFactories[ParameterTypes::received] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::received] = "received"; } received_Param resip::p_received;
ParameterTypes::Type response_Param::getTypeNum() const {return ParameterTypes::response;} response_Param::response_Param() { ParameterTypes::ParameterFactories[ParameterTypes::response] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::response] = "response"; } response_Param resip::p_response;
ParameterTypes::Type retryAfter_Param::getTypeNum() const {return ParameterTypes::retryAfter;} retryAfter_Param::retryAfter_Param() { ParameterTypes::ParameterFactories[ParameterTypes::retryAfter] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::retryAfter] = "retry-after"; } retryAfter_Param resip::p_retryAfter;
ParameterTypes::Type rinstance_Param::getTypeNum() const {return ParameterTypes::rinstance;} rinstance_Param::rinstance_Param() { ParameterTypes::ParameterFactories[ParameterTypes::rinstance] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::rinstance] = "rinstance"; } rinstance_Param resip::p_rinstance;
ParameterTypes::Type rport_Param::getTypeNum() const {return ParameterTypes::rport;} rport_Param::rport_Param() { ParameterTypes::ParameterFactories[ParameterTypes::rport] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::rport] = "rport"; } rport_Param resip::p_rport;
ParameterTypes::Type server_Param::getTypeNum() const {return ParameterTypes::server;} server_Param::server_Param() { ParameterTypes::ParameterFactories[ParameterTypes::server] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::server] = "server"; } server_Param resip::p_server;
ParameterTypes::Type site_Param::getTypeNum() const {return ParameterTypes::site;} site_Param::site_Param() { ParameterTypes::ParameterFactories[ParameterTypes::site] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::site] = "site"; } site_Param resip::p_site;
ParameterTypes::Type size_Param::getTypeNum() const {return ParameterTypes::size;} size_Param::size_Param() { ParameterTypes::ParameterFactories[ParameterTypes::size] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::size] = "size"; } size_Param resip::p_size;
ParameterTypes::Type smimeType_Param::getTypeNum() const {return ParameterTypes::smimeType;} smimeType_Param::smimeType_Param() { ParameterTypes::ParameterFactories[ParameterTypes::smimeType] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::smimeType] = "smime-type"; } smimeType_Param resip::p_smimeType;
ParameterTypes::Type stale_Param::getTypeNum() const {return ParameterTypes::stale;} stale_Param::stale_Param() { ParameterTypes::ParameterFactories[ParameterTypes::stale] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::stale] = "stale"; } stale_Param resip::p_stale;
ParameterTypes::Type tag_Param::getTypeNum() const {return ParameterTypes::tag;} tag_Param::tag_Param() { ParameterTypes::ParameterFactories[ParameterTypes::tag] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::tag] = "tag"; } tag_Param resip::p_tag;
ParameterTypes::Type toTag_Param::getTypeNum() const {return ParameterTypes::toTag;} toTag_Param::toTag_Param() { ParameterTypes::ParameterFactories[ParameterTypes::toTag] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::toTag] = "to-tag"; } toTag_Param resip::p_toTag;
ParameterTypes::Type transport_Param::getTypeNum() const {return ParameterTypes::transport;} transport_Param::transport_Param() { ParameterTypes::ParameterFactories[ParameterTypes::transport] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::transport] = "transport"; } transport_Param resip::p_transport;
ParameterTypes::Type ttl_Param::getTypeNum() const {return ParameterTypes::ttl;} ttl_Param::ttl_Param() { ParameterTypes::ParameterFactories[ParameterTypes::ttl] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::ttl] = "ttl"; } ttl_Param resip::p_ttl;
ParameterTypes::Type uri_Param::getTypeNum() const {return ParameterTypes::uri;} uri_Param::uri_Param() { ParameterTypes::ParameterFactories[ParameterTypes::uri] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::uri] = "uri"; } uri_Param resip::p_uri;
ParameterTypes::Type user_Param::getTypeNum() const {return ParameterTypes::user;} user_Param::user_Param() { ParameterTypes::ParameterFactories[ParameterTypes::user] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::user] = "user"; } user_Param resip::p_user;
ParameterTypes::Type extension_Param::getTypeNum() const {return ParameterTypes::extension;} extension_Param::extension_Param() { ParameterTypes::ParameterFactories[ParameterTypes::extension] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::extension] = "ext"; } extension_Param resip::p_extension;
ParameterTypes::Type username_Param::getTypeNum() const {return ParameterTypes::username;} username_Param::username_Param() { ParameterTypes::ParameterFactories[ParameterTypes::username] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::username] = "username"; } username_Param resip::p_username;
ParameterTypes::Type earlyOnly_Param::getTypeNum() const {return ParameterTypes::earlyOnly;} earlyOnly_Param::earlyOnly_Param() { ParameterTypes::ParameterFactories[ParameterTypes::earlyOnly] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::earlyOnly] = "early-only"; } earlyOnly_Param resip::p_earlyOnly;
ParameterTypes::Type refresher_Param::getTypeNum() const {return ParameterTypes::refresher;} refresher_Param::refresher_Param() { ParameterTypes::ParameterFactories[ParameterTypes::refresher] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::refresher] = "refresher"; } refresher_Param resip::p_refresher;
ParameterTypes::Type profileType_Param::getTypeNum() const {return ParameterTypes::profileType;} profileType_Param::profileType_Param() { ParameterTypes::ParameterFactories[ParameterTypes::profileType] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::profileType] = "profile-type"; } profileType_Param resip::p_profileType;
ParameterTypes::Type vendor_Param::getTypeNum() const {return ParameterTypes::vendor;} vendor_Param::vendor_Param() { ParameterTypes::ParameterFactories[ParameterTypes::vendor] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::vendor] = "vendor"; } vendor_Param resip::p_vendor;
ParameterTypes::Type model_Param::getTypeNum() const {return ParameterTypes::model;} model_Param::model_Param() { ParameterTypes::ParameterFactories[ParameterTypes::model] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::model] = "model"; } model_Param resip::p_model;
ParameterTypes::Type version_Param::getTypeNum() const {return ParameterTypes::version;} version_Param::version_Param() { ParameterTypes::ParameterFactories[ParameterTypes::version] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::version] = "version"; } version_Param resip::p_version;
ParameterTypes::Type effectiveBy_Param::getTypeNum() const {return ParameterTypes::effectiveBy;} effectiveBy_Param::effectiveBy_Param() { ParameterTypes::ParameterFactories[ParameterTypes::effectiveBy] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::effectiveBy] = "effective-by"; } effectiveBy_Param resip::p_effectiveBy;
ParameterTypes::Type document_Param::getTypeNum() const {return ParameterTypes::document;} document_Param::document_Param() { ParameterTypes::ParameterFactories[ParameterTypes::document] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::document] = "document"; } document_Param resip::p_document;
ParameterTypes::Type appId_Param::getTypeNum() const {return ParameterTypes::appId;} appId_Param::appId_Param() { ParameterTypes::ParameterFactories[ParameterTypes::appId] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::appId] = "app-id"; } appId_Param resip::p_appId;
ParameterTypes::Type networkUser_Param::getTypeNum() const {return ParameterTypes::networkUser;} networkUser_Param::networkUser_Param() { ParameterTypes::ParameterFactories[ParameterTypes::networkUser] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::networkUser] = "network-user"; } networkUser_Param resip::p_networkUser;
ParameterTypes::Type url_Param::getTypeNum() const {return ParameterTypes::url;} url_Param::url_Param() { ParameterTypes::ParameterFactories[ParameterTypes::url] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::url] = "url"; } url_Param resip::p_url;
ParameterTypes::Type qop_Param::getTypeNum() const {return ParameterTypes::qop;} qop_Param::qop_Param() { ParameterTypes::ParameterFactories[ParameterTypes::qop] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::qop] = "qop"; } qop_Param resip::p_qop;
ParameterTypes::Type sigcompId_Param::getTypeNum() const {return ParameterTypes::sigcompId;} sigcompId_Param::sigcompId_Param() { ParameterTypes::ParameterFactories[ParameterTypes::sigcompId] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::sigcompId] = "sigcomp-id"; } sigcompId_Param resip::p_sigcompId;
ParameterTypes::Type addTransport_Param::getTypeNum() const {return ParameterTypes::addTransport;} addTransport_Param::addTransport_Param() { ParameterTypes::ParameterFactories[ParameterTypes::addTransport] = Type::decode; ParameterTypes::ParameterNames[ParameterTypes::addTransport] = "addtransport"; } addTransport_Param resip::p_addTransport;
