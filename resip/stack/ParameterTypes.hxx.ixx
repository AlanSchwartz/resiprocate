// !bwc! I apologize that this is so ugly. If you know of a standard GNU utility that will re-indent uglified c++ code (like this), let me know...
// Generated by updateParameters.sh 





class data_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "data"; } data_Param(); }; extern data_Param p_data;
class control_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "control"; } control_Param(); }; extern control_Param p_control;
class mobility_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "mobility"; } mobility_Param(); }; extern mobility_Param p_mobility;
class description_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "description"; } description_Param(); }; extern description_Param p_description;
class events_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "events"; } events_Param(); }; extern events_Param p_events;
class priority_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "priority"; } priority_Param(); }; extern priority_Param p_priority;
class methods_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "methods"; } methods_Param(); }; extern methods_Param p_methods;
class schemes_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "schemes"; } schemes_Param(); }; extern schemes_Param p_schemes;
class application_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "application"; } application_Param(); }; extern application_Param p_application;
class video_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "video"; } video_Param(); }; extern video_Param p_video;
class language_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "language"; } language_Param(); }; extern language_Param p_language;
class type_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "type"; } type_Param(); }; extern type_Param p_type;
class isFocus_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "isfocus"; } isFocus_Param(); }; extern isFocus_Param p_isFocus;
class actor_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "actor"; } actor_Param(); }; extern actor_Param p_actor;
class text_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "text"; } text_Param(); }; extern text_Param p_text;
class extensions_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "extensions"; } extensions_Param(); }; extern extensions_Param p_extensions;
class Instance_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "+sip.instance"; } Instance_Param(); }; extern Instance_Param p_Instance;
class regid_Param : public ParamBase { public: typedef UInt32Parameter Type; typedef UInt32Parameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "reg-id"; } regid_Param(); }; extern regid_Param p_regid;
class ob_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "ob"; } ob_Param(); }; extern ob_Param p_ob;
class pubGruu_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "pub-gruu"; } pubGruu_Param(); }; extern pubGruu_Param p_pubGruu;
class tempGruu_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "temp-gruu"; } tempGruu_Param(); }; extern tempGruu_Param p_tempGruu;
class gruu_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "gruu"; } gruu_Param(); }; extern gruu_Param p_gruu;
class accessType_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "access-type"; } accessType_Param(); }; extern accessType_Param p_accessType;
class algorithm_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "algorithm"; } algorithm_Param(); }; extern algorithm_Param p_algorithm;
class boundary_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "boundary"; } boundary_Param(); }; extern boundary_Param p_boundary;
class branch_Param : public ParamBase { public: typedef BranchParameter Type; typedef BranchParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "branch"; } branch_Param(); }; extern branch_Param p_branch;
class charset_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "charset"; } charset_Param(); }; extern charset_Param p_charset;
class cnonce_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "cnonce"; } cnonce_Param(); }; extern cnonce_Param p_cnonce;
class comp_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "comp"; } comp_Param(); }; extern comp_Param p_comp;
class dAlg_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "d-alg"; } dAlg_Param(); }; extern dAlg_Param p_dAlg;
class dQop_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "d-qop"; } dQop_Param(); }; extern dQop_Param p_dQop;
class dVer_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "d-ver"; } dVer_Param(); }; extern dVer_Param p_dVer;
class directory_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "directory"; } directory_Param(); }; extern directory_Param p_directory;
class domain_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "domain"; } domain_Param(); }; extern domain_Param p_domain;
class duration_Param : public ParamBase { public: typedef UInt32Parameter Type; typedef UInt32Parameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "duration"; } duration_Param(); }; extern duration_Param p_duration;
class expiration_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "expiration"; } expiration_Param(); }; extern expiration_Param p_expiration;
class expires_Param : public ParamBase { public: typedef UInt32Parameter Type; typedef UInt32Parameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "expires"; } expires_Param(); }; extern expires_Param p_expires;
class filename_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "filename"; } filename_Param(); }; extern filename_Param p_filename;
class fromTag_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "from-tag"; } fromTag_Param(); }; extern fromTag_Param p_fromTag;
class handling_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "handling"; } handling_Param(); }; extern handling_Param p_handling;
class id_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "id"; } id_Param(); }; extern id_Param p_id;
class lr_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "lr"; } lr_Param(); }; extern lr_Param p_lr;
class maddr_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "maddr"; } maddr_Param(); }; extern maddr_Param p_maddr;
class method_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "method"; } method_Param(); }; extern method_Param p_method;
class micalg_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "micalg"; } micalg_Param(); }; extern micalg_Param p_micalg;
class mode_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "mode"; } mode_Param(); }; extern mode_Param p_mode;
class name_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "name"; } name_Param(); }; extern name_Param p_name;
class nc_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "nc"; } nc_Param(); }; extern nc_Param p_nc;
class nonce_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "nonce"; } nonce_Param(); }; extern nonce_Param p_nonce;
class opaque_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "opaque"; } opaque_Param(); }; extern opaque_Param p_opaque;
class permission_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "permission"; } permission_Param(); }; extern permission_Param p_permission;
class protocol_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "protocol"; } protocol_Param(); }; extern protocol_Param p_protocol;
class purpose_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "purpose"; } purpose_Param(); }; extern purpose_Param p_purpose;
class q_Param : public ParamBase { public: typedef QValueParameter Type; typedef QValueParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "q"; } q_Param(); }; extern q_Param p_q;
class realm_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "realm"; } realm_Param(); }; extern realm_Param p_realm;
class reason_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "reason"; } reason_Param(); }; extern reason_Param p_reason;
class received_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "received"; } received_Param(); }; extern received_Param p_received;
class response_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "response"; } response_Param(); }; extern response_Param p_response;
class retryAfter_Param : public ParamBase { public: typedef UInt32Parameter Type; typedef UInt32Parameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "retry-after"; } retryAfter_Param(); }; extern retryAfter_Param p_retryAfter;
class rinstance_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "rinstance"; } rinstance_Param(); }; extern rinstance_Param p_rinstance;
class rport_Param : public ParamBase { public: typedef RportParameter Type; typedef RportParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "rport"; } rport_Param(); }; extern rport_Param p_rport;
class server_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "server"; } server_Param(); }; extern server_Param p_server;
class site_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "site"; } site_Param(); }; extern site_Param p_site;
class size_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "size"; } size_Param(); }; extern size_Param p_size;
class smimeType_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "smime-type"; } smimeType_Param(); }; extern smimeType_Param p_smimeType;
class stale_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "stale"; } stale_Param(); }; extern stale_Param p_stale;
class tag_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "tag"; } tag_Param(); }; extern tag_Param p_tag;
class toTag_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "to-tag"; } toTag_Param(); }; extern toTag_Param p_toTag;
class transport_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "transport"; } transport_Param(); }; extern transport_Param p_transport;
class ttl_Param : public ParamBase { public: typedef UInt32Parameter Type; typedef UInt32Parameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "ttl"; } ttl_Param(); }; extern ttl_Param p_ttl;
class uri_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "uri"; } uri_Param(); }; extern uri_Param p_uri;
class user_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "user"; } user_Param(); }; extern user_Param p_user;
class extension_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "ext"; } extension_Param(); }; extern extension_Param p_extension;
class username_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "username"; } username_Param(); }; extern username_Param p_username;
class earlyOnly_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "early-only"; } earlyOnly_Param(); }; extern earlyOnly_Param p_earlyOnly;
class refresher_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "refresher"; } refresher_Param(); }; extern refresher_Param p_refresher;
class profileType_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "profile-type"; } profileType_Param(); }; extern profileType_Param p_profileType;
class vendor_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "vendor"; } vendor_Param(); }; extern vendor_Param p_vendor;
class model_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "model"; } model_Param(); }; extern model_Param p_model;
class version_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "version"; } version_Param(); }; extern version_Param p_version;
class effectiveBy_Param : public ParamBase { public: typedef UInt32Parameter Type; typedef UInt32Parameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "effective-by"; } effectiveBy_Param(); }; extern effectiveBy_Param p_effectiveBy;
class document_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "document"; } document_Param(); }; extern document_Param p_document;
class appId_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "app-id"; } appId_Param(); }; extern appId_Param p_appId;
class networkUser_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "network-user"; } networkUser_Param(); }; extern networkUser_Param p_networkUser;
class url_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "url"; } url_Param(); }; extern url_Param p_url;
class qop_Param : public ParamBase { public: typedef DataParameter Type; typedef DataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "qop"; } qop_Param(); }; extern qop_Param p_qop;
class sigcompId_Param : public ParamBase { public: typedef QuotedDataParameter Type; typedef QuotedDataParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "sigcomp-id"; } sigcompId_Param(); }; extern sigcompId_Param p_sigcompId;
class addTransport_Param : public ParamBase { public: typedef ExistsParameter Type; typedef ExistsParameter::Type DType; virtual ParameterTypes::Type getTypeNum() const; virtual const char* name() const { return "addtransport"; } addTransport_Param(); }; extern addTransport_Param p_addTransport;
