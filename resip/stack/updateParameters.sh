#!/bin/sh

# Make ParameterHash.gperf

echo "%{
#include <string.h>
#include <ctype.h>
#include \"resip/stack/ParameterTypes.hxx\"
namespace resip {
using namespace std;
%}
struct params { char *name; ParameterTypes::Type type; };
%%" > ParameterHash.gperf

cat ParameterTypes.in | grep "^defineParam" | sed -Ee 's/defineParam\(([A-Za-z0-9]+),[ ]*\"([^"]+)\".*/\2, ParameterTypes::\1/' >> ParameterHash.gperf

echo "%%
}" >> ParameterHash.gperf

# TODO move away from using the preprocessor here so that the generated files are reasonably readable.

# Make ParameterTypes.hxx.ixx

echo "
#define defineParam(_enum, _name, _type, _RFC_ref_ignored)  \\
   class _enum##_Param : public ParamBase                   \\
   {                                                        \\
     public:                                                \\
      typedef _type Type;                                   \\
      typedef _type::Type DType;                            \\
      virtual ParameterTypes::Type getTypeNum() const;      \\
      virtual const char* name() const { return _name; }    \\
      _enum##_Param();                                      \\
   };                                                       \\
   extern _enum##_Param p_##_enum;
" > ParameterTypes.hxx.ixx.temp

cat ParameterTypes.in >> ParameterTypes.hxx.ixx.temp

# run preprocessor on ParameterTypes.hxx.ixx.temp
echo "// !bwc! I apologize that this is so ugly. If you know of a standard GNU utility that will re-indent uglified c++ code (like this), let me know..." > ParameterTypes.hxx.ixx;

echo "// Generated by updateParameters.sh " >> ParameterTypes.hxx.ixx;

gcc -E -x c++ ParameterTypes.hxx.ixx.temp | sed -Ee 's/#.*//' >> ParameterTypes.hxx.ixx
rm ParameterTypes.hxx.ixx.temp

# Make ParameterTypes.cxx.ixx

echo "
#define defineParam(_enum, _name, _type, _RFC_ref_ignored)                      \\
ParameterTypes::Type                                                            \\
_enum##_Param::getTypeNum() const {return ParameterTypes::_enum;}               \\
_enum##_Param::_enum##_Param()                                                  \\
{                                                                               \\
   ParameterTypes::ParameterFactories[ParameterTypes::_enum] = Type::decode;    \\
   ParameterTypes::ParameterNames[ParameterTypes::_enum] = _name;               \\
}                                                                               \\
_enum##_Param resip::p_##_enum;
" > ParameterTypes.cxx.ixx.temp

cat ParameterTypes.in >> ParameterTypes.cxx.ixx.temp

echo "// !bwc! I apologize that this is so ugly. If you know of a standard GNU utility that will re-indent uglified c++ code (like this), let me know..." > ParameterTypes.cxx.ixx;

echo "// Generated by updateParameters.sh " >> ParameterTypes.cxx.ixx;

gcc -E -x c++ ParameterTypes.cxx.ixx.temp | sed -Ee 's/#.*//' >> ParameterTypes.cxx.ixx
rm ParameterTypes.cxx.ixx.temp

# Make ParserCategory.hxx.ixx
echo "#define defineParam(_enum, _name, _type, _RFC_ref_ignored)                \\
      const _enum##_Param::DType& param(const _enum##_Param& paramType) const;  \\
      _enum##_Param::DType& param(const _enum##_Param& paramType);" >> ParserCategory.hxx.ixx.temp

cat ParameterTypes.in >> ParserCategory.hxx.ixx.temp

echo "// !bwc! I apologize that this is so ugly. If you know of a standard GNU utility that will re-indent uglified c++ code (like this), let me know..." > ParserCategory.hxx.ixx;

echo "// Generated by updateParameters.sh " >> ParserCategory.hxx.ixx;

gcc -E -x c++ ParserCategory.hxx.ixx.temp | sed -Ee 's/#.*//' >> ParserCategory.hxx.ixx
rm ParserCategory.hxx.ixx.temp

# Make ParserCategory.cxx.ixx
echo "#define defineParam(_enum, _name, _type, _RFC_ref_ignored)                                                \\
_enum##_Param::DType&                                                                                           \\
ParserCategory::param(const _enum##_Param& paramType)                                                           \\
{                                                                                                               \\
   checkParsed();                                                                                               \\
   _enum##_Param::Type* p =                                                                                     \\
      static_cast<_enum##_Param::Type*>(getParameterByEnum(ParameterTypes::_enum));                            \\
   if (!p)                                                                                                      \\
   {                                                                                                            \\
      p = new _enum##_Param::Type(ParameterTypes::_enum);                                                      \\
      mParameters.push_back(p);                                                                                 \\
   }                                                                                                            \\
   return p->value();                                                                                           \\
}                                                                                                               \\
                                                                                                                \\
const _enum##_Param::DType&                                                                                     \\
ParserCategory::param(const _enum##_Param& paramType) const                                                     \\
{                                                                                                               \\
   checkParsed();                                                                                               \\
   _enum##_Param::Type* p =                                                                                     \\
      static_cast<_enum##_Param::Type*>(getParameterByEnum(ParameterTypes::_enum));                            \\
   if (!p)                                                                                                      \\
   {                                                                                                            \\
      InfoLog(<< \"Missing parameter \" _name ); \\
      DebugLog(<< *this);                                                                                       \\
      throw Exception(\"Missing parameter \" _name, __FILE__, __LINE__);                                        \\
   }                                                                                                            \\
   return p->value();                                                                                           \\
};" >> ParserCategory.cxx.ixx.temp

cat ParameterTypes.in >> ParserCategory.cxx.ixx.temp

echo "// !bwc! I apologize that this is so ugly. If you know of a standard GNU utility that will re-indent uglified c++ code (like this), let me know..." > ParserCategory.cxx.ixx;

echo "// Generated by updateParameters.sh " >> ParserCategory.cxx.ixx;

gcc -E -x c++ ParserCategory.cxx.ixx.temp | sed -Ee 's/#.*//' >> ParserCategory.cxx.ixx
rm ParserCategory.cxx.ixx.temp


cat ParameterTypes.in | sed -Ee 's/defineParam\(([a-zA-Z0-9]+).*/\1,/'> ParameterTypeEnums.hxx.ixx

