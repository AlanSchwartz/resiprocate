#ifndef Helper_hxx
#define Helper_hxx


#include <sipstack/SipMessage.hxx>
#include <sipstack/Symbols.hxx>

namespace Vocal2
{

class Helper
{
   public:

      const static int tagSize;  //bytes in to-tag& from-tag, should prob. live
      //somewhere else

      //in general content length handled automatically by SipMessage?

      static SipMessage makeInvite(const NameAddr& target,
                                   const NameAddr& from,
                                   const NameAddr& contact);

      static SipMessage makeForwardedInvite(const SipMessage& invite);

      static SipMessage makeResponse(const SipMessage& request, int responseCode);

      static SipMessage makeResponse(const SipMessage& request, int responseCode, const NameAddr& myContact);

      //to, maxforwards=70, requestLine& cseq method set, cseq sequence is 1
      static SipMessage makeRequest(const NameAddr& target, MethodTypes method); // deprecated

      //to, maxforward=70, requestline created, cseq method set, cseq sequence
      //is 1, from and from tag set, contact set, CallId created
      //while contact is only necessary for requests that establish a dialog,
      //those ar the requests most likely created by this method, others will
      //be generated by the dialog.
      static SipMessage makeRequest(const NameAddr& target, 
                                    const NameAddr& from,
                                    const NameAddr& contact,
                                    MethodTypes method);
           

      //creates to, from with tag, cseq method set, cseq sequence is 1
      static SipMessage makeRegister(const NameAddr& proxy,
                                     const NameAddr& aor);

      //should default proto-version, anything else defaulted/passed in?
      static Via makeVia(NameAddr& source);

      // copy the values from Url into rline (with sip-uri parameters?)
      static void setUri(RequestLine& rLine, const NameAddr& url);
      static void setUri(StatusLine& rLine, const NameAddr& url);
      
      static SipMessage makeAck(const SipMessage& request, const SipMessage& response);

      static Data computeUniqueBranch();
      static Data computeProxyBranch();

      static Data computeCallId();
      static Data computeTag(int numBytes);
};
 
}

#endif

